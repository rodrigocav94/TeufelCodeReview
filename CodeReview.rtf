On line 10, I believe MusicAlbum would need to conform to the codable protocol in order to be decoded by a JSONDecoder.
 
On line 32, it’s necessary to store the combine pipeline in a cancellable in order to keep it in memory. You can quickly do that by adding the line .store(in: &cancellables)
 
On line 43, there’s an attempt to initialize ViewModel without giving an initial value to it’s albums property, if your intention was to quickly initialize it without passing any values, you could set a default empty initial value like this on line 25:
init(albums: [MusicAlbum] = [])
 
On line 50, you could avoid being verbose by replacing if !false == isLoading for if isLoading.
It’s not necessary to use the isActive parameter for the NavigationLink on line 61, as the code doesn’t require for the navigation to happen programatically. Also in a different occasion, if you ever need to have a binding that only gets read but never written, you could use .constant(showDetailView) instead of creating a custom binding.
 
From line 65 to 74, It would be nice to turn the view into a component in order to make the code smaller. Large code files tend to confuse Xcode and when there’s an error somewhere in it, Xcode doesn’t know where to point out.
 
On line 75, I would avoid stacking braces like this “{{{{{“, as it’s difficult to understand what scope you’re trying to close.
 
On line 87, you could remove isLoading.toggle() by defining isLoading’s initial value as true on line 44. It’s also important to add some logic to check when the isLoading.toggle should be defined as false and dismiss the ProgressView, as I couldn’t find any line that kept track of that.
 
On line 97, coverarturl will always be nil because no value is being passed on line 63. It’s name is also lacking camelCase, unlike the rest of the code.
 
On line 126, you could use nil coalescing instead of force unwrapping to display a sample image in case a data does not get rendered properly. It would also be a good idea to create a computed property to safely unwrap the optional values into an Image.
 
On line 102 and 125, it wouldn’t be necessary to use a VStack, as there’s only one view.  You can also entirely remove from line 122 to 131 and replace the line 102 to 104 with: Group { if let coverArtData { Image(uiImage: UIImage(data: coverArtData)!) } }

It's also necessary to use weak self in all functions that are run in the background to avoid a retaining cycle and make any changes that will affect the user interface on the main thread using.
